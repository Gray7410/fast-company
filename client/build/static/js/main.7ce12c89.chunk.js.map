{"version":3,"sources":["reportWebVitals.js","App/services/localStorage.service.js","App/services/auth.service.js","App/services/http.service.js","App/services/profession.service.js","App/store/professions.js","App/services/user.service.js","App/utils/history.js","App/utils/generateAuthError.js","App/store/users.js","App/components/ui/userCard.jsx","App/components/ui/qualities/quality.jsx","App/services/quality.service.js","App/store/qualities.js","App/components/ui/qualities/index.js","App/components/ui/qualities/qualitiesList.jsx","App/components/ui/qualitiesCard.jsx","App/components/ui/meetingsCard.jsx","App/utils/displayDate.js","App/components/common/comments/comment.jsx","App/components/common/comments/commentsList.jsx","App/components/common/form/textAreaField.jsx","App/utils/validator.js","App/components/common/comments/addCommentForm.jsx","App/components/common/comments/index.js","App/services/comment.service.js","App/store/comments.js","App/components/ui/comments.jsx","App/components/page/userPage/index.js","App/components/page/userPage/userPage.jsx","App/components/common/pagination.jsx","App/components/common/groupList.jsx","App/components/ui/searchStatus.jsx","App/components/common/bookmark.jsx","App/components/common/table/tableHeader.jsx","App/components/common/table/tableBody.jsx","App/components/common/table/index.js","App/components/common/table/table.jsx","App/components/ui/profession.jsx","App/components/ui/usersTable.jsx","App/components/searchField.jsx","App/components/page/usersListPage/index.js","App/components/page/usersListPage/usersListPage.jsx","App/utils/paginate.js","App/components/common/form/textField.jsx","App/components/common/form/selectField.jsx","App/components/common/form/radioField.jsx","App/components/common/form/multiSelectField.jsx","App/components/common/backButton.jsx","App/components/page/editUserPage/index.js","App/components/page/editUserPage/editUserPage.jsx","App/components/ui/hoc/usersLoader.jsx","App/layouts/users.jsx","App/components/common/form/checkBoxField.jsx","App/components/ui/loginForm.jsx","App/components/ui/registerForm.jsx","App/layouts/login.jsx","App/utils/mockData.js","App/layouts/main.jsx","App/layouts/logOut.jsx","App/components/ui/navProfile.jsx","App/components/ui/navBar.jsx","App/components/common/protectedRoute.jsx","App/components/ui/hoc/appLoader.jsx","App/App.js","App/store/createStore.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TOKEN_KEY","REFRESH_KEY","EXPIRES_KEY","USERID_KEY","localStorageService","setTokens","refreshToken","accessToken","userId","expiresIn","expiresDate","Date","getTime","localStorage","setItem","getAccessToken","getItem","getRefreshToken","getTokenExpiresDate","getUserId","removeAuthData","removeItem","httpAuth","axios","create","baseURL","config","apiEndpoint","params","key","process","REACT_APP_FIREBASE_KEY","authService","register","payload","a","post","data","login","email","password","returnSecureToken","refresh","grant_type","refresh_token","http","configFile","interceptors","request","use","isExpired","now","isFireBase","containSlash","test","url","slice","idToken","id_token","expires_id","localId","user_id","auth","headers","Authorization","error","Promise","reject","response","res","content","_id","Object","keys","map","status","console","log","toast","httpService","get","put","delete","professionService","req","professionsSlice","createSlice","name","initialState","entities","isLoading","lastFetch","reducers","professionsRequested","state","professionsReceved","action","professionsRequestFailed","professionsReducer","reducer","actions","isOutdated","date","getProfessionById","professionId","professions","find","p","userEndpoint","userService","getCurrentUser","updateCurrentUser","history","createBrowserHistory","generateAuthError","isLoggedIn","dataLoaded","usersSlice","usersRequested","usersReceived","usersRequestFailed","authRequestSuccess","authRequestFailed","userCreated","Array","isArray","push","userLoggedOut","userUpdateSuccessed","findIndex","u","authRequested","usersReducer","createAction","userUpdateRequested","userUpdateFailed","loadUsersList","dispatch","getState","message","getUserById","users","UserCard","user","useHistory","currentUserId","useSelector","profession","className","to","location","pathname","title","src","image","alt","width","height","role","rate","Quality","color","qualityEndpoint","qualityService","id","fetchAll","qualitiesSlice","qualitiesRequested","qualitiesReceved","qualitiesRequestFiled","qualitiesReducer","loadQualitiesList","qualities","Qualities","qualitiesIds","useDispatch","qualitiesList","qualitiesArray","qualId","quality","useEffect","qual","QualitiesCard","MeetingsCard","value","displayDate","dateNow","getFullYear","getDate","getHours","minutesDif","getMinutes","toLocaleString","month","getMonth","Comment","created","created_at","onRemove","onClick","CommentsList","comments","comment","TextAreaField","label","onChange","htmlFor","target","defaultProps","type","validator","errors","validate","validateMethod","statusValidate","trim","length","fieldName","AddCommentForm","onSubmit","useState","setData","setErrors","validatorConfig","isRequired","e","preventDefault","prevState","commentEndpoint","commentService","createComment","getComments","pageId","orderBy","equalTo","removeComment","commentId","commentsSlice","commentsRequested","commentsReceived","commentsRequestFailed","commentCreated","commentRemoved","filter","c","commentsReducer","commentCreateRequested","createCommentFailed","commentRemoveRequested","commentRemoveFailed","Comments","useParams","UserId","sortedComments","commentData","UserPage","completedMeetings","Pagination","itemsCount","pageSize","onPageChange","currentPage","pageCount","Math","ceil","pages","_","range","page","GroupList","items","valueProperty","contentProperty","onItemSelect","selectedItem","onClickClear","item","SearchStatus","selectedProf","number","lastOne","Number","toString","indexOf","renderPhrase","BookMark","rest","TableHeader","onSort","selectedSort","columns","column","path","order","undefined","scope","TableBody","renderContent","component","Table","children","Profession","prof","UserTable","onToggleBookMark","bookmark","SearchField","placeholder","UsersListPage","setCurrentPage","setSelectedProf","sortBy","setSortBy","search","setSearch","handleDelete","filteredUsers","toLowerCase","includes","count","userCrop","pageNumber","startIndex","splice","paginate","onDelete","pageIndex","TextField","showPassword","setShowPassword","SelectField","defaultOption","options","optionsArray","values","disabled","option","RadioField","handleChange","checked","MultiSelectField","defaultValue","isMulti","closeMenuOnSelect","classNamePrefix","BackHistoryButton","goBack","EditUserPage","currentUser","professionsList","q","userQualities","sex","isEmail","isCapitalSymbol","isContainDigit","min","isValid","updatedData","UsersLoader","dataStatus","propTypes","PropTypes","oneOfType","arrayOf","node","Users","edit","CheckBoxField","LoginForm","stayOn","loginError","redirect","from","code","errorMessage","RegisterForm","license","ProfessionsList","newData","Login","formType","setFormType","toggleFormType","useMockData","statusConsts","setError","setStatus","progress","setProgress","setCount","summaryCount","incrementCount","newProgress","floor","updateProgress","initialize","Main","widthProgress","style","aria-valuenow","aria-valuemin","aria-valuemax","LogOut","NavProfile","isOpen","setOpen","NavBar","ProtectedRoute","Component","render","props","AppLoader","usersStatusLoading","App","exact","rootReducer","combineReducers","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ce12c89.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","const TOKEN_KEY = \"jwt-token\";\r\nconst REFRESH_KEY = \"jwt-refresh-token\";\r\nconst EXPIRES_KEY = \"jwt-expires\";\r\nconst USERID_KEY = \"user-local-id\";\r\n\r\nexport function setTokens({\r\n    refreshToken,\r\n    accessToken,\r\n    userId,\r\n    expiresIn = 3600\r\n}) {\r\n    const expiresDate = new Date().getTime() + expiresIn * 1000;\r\n    localStorage.setItem(USERID_KEY, userId);\r\n    localStorage.setItem(TOKEN_KEY, accessToken);\r\n    localStorage.setItem(REFRESH_KEY, refreshToken);\r\n    localStorage.setItem(EXPIRES_KEY, expiresDate);\r\n}\r\n\r\nexport function getAccessToken() {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n}\r\n\r\nexport function getRefreshToken() {\r\n    return localStorage.getItem(REFRESH_KEY);\r\n}\r\nexport function removeAuthData() {\r\n    localStorage.removeItem(USERID_KEY);\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    localStorage.removeItem(REFRESH_KEY);\r\n    localStorage.removeItem(EXPIRES_KEY);\r\n}\r\n\r\nexport function getTokenExpiresDate() {\r\n    return localStorage.getItem(EXPIRES_KEY);\r\n}\r\nexport function getUserId() {\r\n    return localStorage.getItem(USERID_KEY);\r\n}\r\n\r\nconst localStorageService = {\r\n    setTokens,\r\n    getAccessToken,\r\n    getRefreshToken,\r\n    getTokenExpiresDate,\r\n    getUserId,\r\n    removeAuthData\r\n};\r\n\r\nexport default localStorageService;\r\n","import axios from \"axios\";\r\nimport localStorageService from \"./localStorage.service\";\r\nimport config from \"../config.json\";\r\n\r\nconst httpAuth = axios.create({\r\n    baseURL: config.apiEndpoint + \"/auth/\",\r\n    params: {\r\n        key: process.env.REACT_APP_FIREBASE_KEY\r\n    }\r\n});\r\n\r\nconst authService = {\r\n    register: async (payload) => {\r\n        const { data } = await httpAuth.post(\"signUp\", payload);\r\n        return data;\r\n    },\r\n    login: async ({ email, password }) => {\r\n        const { data } = await httpAuth.post(\"signInWithPassword\", {\r\n            email,\r\n            password,\r\n            returnSecureToken: true\r\n        });\r\n        return data;\r\n    },\r\n    refresh: async () => {\r\n        const { data } = await httpAuth.post(\"token\", {\r\n            grant_type: \"refresh_token\",\r\n            refresh_token: localStorageService.getRefreshToken()\r\n        });\r\n        return data;\r\n    }\r\n};\r\n\r\nexport default authService;\r\n","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport configFile from \"../config.json\";\r\nimport authService from \"./auth.service\";\r\nimport localStorageService from \"./localStorage.service\";\r\n\r\nconst http = axios.create({\r\n    baseURL: configFile.apiEndpoint\r\n});\r\n\r\nhttp.interceptors.request.use(\r\n    async function (config) {\r\n        const expiresDate = localStorageService.getTokenExpiresDate();\r\n        const refreshToken = localStorageService.getRefreshToken();\r\n        const isExpired = refreshToken && expiresDate < Date.now();\r\n        if (configFile.isFireBase) {\r\n            const containSlash = /\\/$/gi.test(config.url);\r\n            config.url =\r\n                (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\r\n\r\n            if (isExpired) {\r\n                const data = await authService.refresh();\r\n\r\n                localStorageService.setTokens({\r\n                    refreshToken: data.refresh_token,\r\n                    idToken: data.id_token,\r\n                    expiresIn: data.expires_id,\r\n                    localId: data.user_id\r\n                });\r\n            }\r\n            const accessToken = localStorageService.getAccessToken();\r\n            if (accessToken) {\r\n                config.params = { ...config.params, auth: accessToken };\r\n            }\r\n        } else {\r\n            if (isExpired) {\r\n                const data = await authService.refresh();\r\n\r\n                localStorageService.setTokens(data);\r\n            }\r\n            const accessToken = localStorageService.getAccessToken();\r\n            if (accessToken) {\r\n                config.headers = {\r\n                    ...config.headers,\r\n                    Authorization: `Bearer ${accessToken}`\r\n                };\r\n            }\r\n        }\r\n        return config;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\nfunction transformData(data) {\r\n    return data && !data._id\r\n        ? Object.keys(data).map((key) => ({\r\n              ...data[key]\r\n          }))\r\n        : data;\r\n}\r\nhttp.interceptors.response.use(\r\n    (res) => {\r\n        if (configFile.isFireBase) {\r\n            res.data = { content: transformData(res.data) };\r\n        }\r\n        res.data = { content: res.data };\r\n        return res;\r\n    },\r\n    function (error) {\r\n        const expectedErrors =\r\n            error.response &&\r\n            error.response.status >= 400 &&\r\n            error.response.status < 500;\r\n\r\n        if (!expectedErrors) {\r\n            console.log(error);\r\n            toast.error(\"Something was wrong. Try it later\");\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\nconst httpService = {\r\n    get: http.get,\r\n    post: http.post,\r\n    put: http.put,\r\n    delete: http.delete\r\n};\r\nexport default httpService;\r\n","import httpService from \"./http.service\";\r\n\r\nconst professionEndpoint = \"profession/\";\r\n\r\nconst professionService = {\r\n    get: async () => {\r\n        const req = await httpService.get(professionEndpoint);\r\n        return req.data;\r\n    }\r\n};\r\nexport default professionService;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport professionService from \"../services/profession.service\";\r\n\r\nconst professionsSlice = createSlice({\r\n    name: \"professions\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null,\r\n        lastFetch: null\r\n    },\r\n    reducers: {\r\n        professionsRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        professionsReceved: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.lastFetch = Date.now();\r\n            state.isLoading = false;\r\n        },\r\n        professionsRequestFailed: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { reducer: professionsReducer, actions } = professionsSlice;\r\nconst { professionsRequested, professionsReceved, professionsRequestFailed } =\r\n    actions;\r\n\r\nfunction isOutdated(date) {\r\n    if (Date.now() - date > 10 * 60 * 1000) {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport const loadProfessionsList = () => async (dispatch, getState) => {\r\n    const { lastFetch } = getState().professions;\r\n    if (isOutdated(lastFetch)) {\r\n        dispatch(professionsRequested());\r\n        try {\r\n            const { content } = await professionService.get();\r\n            dispatch(professionsReceved(content));\r\n        } catch (error) {\r\n            dispatch(professionsRequestFailed(error.message));\r\n        }\r\n    }\r\n};\r\n\r\nexport const getProfessions = () => (state) => state.professions.entities;\r\nexport const getProfessionsLoadingStatus = () => (state) =>\r\n    state.professions.isLoading;\r\n\r\nexport const getProfessionById = (professionId) => (state) => {\r\n    if (state.professions.entities) {\r\n        return state.professions.entities.find((p) => p._id === professionId);\r\n    }\r\n};\r\n\r\nexport default professionsReducer;\r\n","import httpService from \"./http.service\";\r\nimport localStorageService from \"./localStorage.service\";\r\n\r\nconst userEndpoint = \"user/\";\r\n\r\nconst userService = {\r\n    get: async () => {\r\n        const { data } = await httpService.get(userEndpoint);\r\n        return data;\r\n    },\r\n    create: async (payload) => {\r\n        const { data } = await httpService.put(\r\n            userEndpoint + payload._id,\r\n            payload\r\n        );\r\n        return data;\r\n    },\r\n    getCurrentUser: async () => {\r\n        const { data } = await httpService.get(\r\n            userEndpoint + localStorageService.getUserId()\r\n        );\r\n        return data;\r\n    },\r\n    updateCurrentUser: async (payload) => {\r\n        const { data } = await httpService.put(\r\n            userEndpoint + payload._id,\r\n            payload\r\n        );\r\n        return data;\r\n    }\r\n};\r\nexport default userService;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nconst history = createBrowserHistory();\r\nexport default history;\r\n","export function generateAuthError(error) {\r\n    switch (error) {\r\n        case \"EMAIL_EXISTS\":\r\n            return \"Пользователь с таким email существует\";\r\n        case \"INVALID_PASSWORD\":\r\n            return \"Неверный пароль\";\r\n        case \"EMAIL_NOT_FOUND\":\r\n            return \"Неверный email\";\r\n\r\n        default:\r\n            return \"Слишком много попыток входа\";\r\n    }\r\n}\r\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\r\nimport userService from \"../services/user.service\";\r\nimport authService from \"../services/auth.service\";\r\nimport localStorageService from \"../services/localStorage.service\";\r\nimport history from \"../utils/history\";\r\nimport { generateAuthError } from \"../utils/generateAuthError\";\r\n\r\nconst initialState = localStorageService.getAccessToken()\r\n    ? {\r\n          entities: null,\r\n          isLoading: true,\r\n          error: null,\r\n          auth: { userId: localStorageService.getUserId() },\r\n          isLoggedIn: true,\r\n          dataLoaded: false\r\n      }\r\n    : {\r\n          entities: null,\r\n          isLoading: false,\r\n          error: null,\r\n          auth: null,\r\n          isLoggedIn: false,\r\n          dataLoaded: false\r\n      };\r\n\r\nconst usersSlice = createSlice({\r\n    name: \"users\",\r\n    initialState,\r\n    reducers: {\r\n        usersRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        usersReceived: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.dataLoaded = true;\r\n            state.isLoading = false;\r\n        },\r\n        usersRequestFailed: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n        authRequestSuccess: (state, action) => {\r\n            state.auth = action.payload;\r\n            state.isLoggedIn = true;\r\n        },\r\n        authRequestFailed: (state, action) => {\r\n            state.error = action.payload;\r\n        },\r\n        userCreated: (state, action) => {\r\n            if (!Array.isArray(state.entities)) {\r\n                state.entities = [];\r\n            }\r\n            state.entities.push(action.payload);\r\n        },\r\n        userLoggedOut: (state) => {\r\n            state.entities = null;\r\n            state.isLoggedIn = false;\r\n            state.auth = null;\r\n            state.dataLoaded = false;\r\n        },\r\n        userUpdateSuccessed: (state, action) => {\r\n            state.entities[\r\n                state.entities.findIndex((u) => u._id === action.payload._id)\r\n            ] = action.payload;\r\n        },\r\n        authRequested: (state) => {\r\n            state.error = null;\r\n        }\r\n    }\r\n});\r\n\r\nconst { reducer: usersReducer, actions } = usersSlice;\r\nconst {\r\n    usersRequested,\r\n    usersReceived,\r\n    usersRequestFailed,\r\n    authRequestSuccess,\r\n    authRequestFailed,\r\n    userLoggedOut,\r\n    userUpdateSuccessed\r\n} = actions;\r\n\r\nconst authRequested = createAction(\"users/authRequested\");\r\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\r\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\r\n\r\nexport const login =\r\n    ({ payload, redirect }) =>\r\n    async (dispatch) => {\r\n        const { email, password } = payload;\r\n        dispatch(authRequested());\r\n        try {\r\n            const data = await authService.login({ email, password });\r\n            localStorageService.setTokens(data);\r\n            dispatch(authRequestSuccess({ userId: data.userId }));\r\n            history.push(redirect);\r\n        } catch (error) {\r\n            const { code, message } = error.response.data.error;\r\n            if (code === 400) {\r\n                const errorMessage = generateAuthError(message);\r\n                dispatch(authRequestFailed(errorMessage));\r\n            } else {\r\n                dispatch(authRequestFailed(error.message));\r\n            }\r\n        }\r\n    };\r\n\r\nexport const signUp = (payload) => async (dispatch) => {\r\n    dispatch(authRequested());\r\n    try {\r\n        const data = await authService.register(payload);\r\n        localStorageService.setTokens(data);\r\n        dispatch(authRequestSuccess({ userId: data.userId }));\r\n        history.push(\"/users\");\r\n    } catch (error) {\r\n        dispatch(authRequestFailed(error.message));\r\n    }\r\n};\r\nexport const logOut = () => (dispatch) => {\r\n    localStorageService.removeAuthData();\r\n    dispatch(userLoggedOut());\r\n    history.push(\"/\");\r\n};\r\n\r\nexport const updateUserData = (payload) => async (dispatch) => {\r\n    dispatch(userUpdateRequested());\r\n    try {\r\n        const data = await userService.updateCurrentUser(payload);\r\n        dispatch(userUpdateSuccessed(data));\r\n        history.push(`/users/${payload._id}`);\r\n    } catch (error) {\r\n        dispatch(userUpdateFailed());\r\n    }\r\n};\r\n\r\nexport const loadUsersList = () => async (dispatch, getState) => {\r\n    dispatch(usersRequested());\r\n    try {\r\n        const { content } = await userService.get();\r\n        dispatch(usersReceived(content));\r\n    } catch (error) {\r\n        dispatch(usersRequestFailed(error.message));\r\n    }\r\n};\r\n\r\nexport const getUsersList = () => (state) => state.users.entities;\r\nexport const getCurrentUserData = () => (state) => {\r\n    return state.users.entities\r\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\r\n        : null;\r\n};\r\nexport const getUserById = (userId) => (state) => {\r\n    if (state.users.entities) {\r\n        return state.users.entities.find((u) => u._id === userId);\r\n    }\r\n};\r\n\r\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\r\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\r\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\r\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\r\nexport const getAuthErrors = () => (state) => state.users.error;\r\n\r\nexport default usersReducer;\r\n","import React from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProfessionById } from \"../../store/professions\";\r\nimport { getCurrentUserId } from \"../../store/users\";\r\n\r\nconst UserCard = ({ user }) => {\r\n    const history = useHistory();\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n    const profession = useSelector(getProfessionById(user.profession));\r\n    return (\r\n        <>\r\n            <div className=\"card mb-3\">\r\n                <div className=\"card-body\">\r\n                    {currentUserId === user._id && (\r\n                        <Link to={history.location.pathname + \"/edit\"}>\r\n                            <button className=\"position-absolute top-0 end-0 btn btn-light btn-sm\">\r\n                                <i\r\n                                    className=\"bi bi-gear\"\r\n                                    title=\"Редактировать профиль\"\r\n                                ></i>\r\n                            </button>\r\n                        </Link>\r\n                    )}\r\n\r\n                    <div className=\"d-flex flex-column align-items-center text-center position-relative\">\r\n                        <img\r\n                            src={user.image}\r\n                            className=\"rounded-circle shadow-1-strong me-3\"\r\n                            alt=\"avatar\"\r\n                            width=\"65\"\r\n                            height=\"65\"\r\n                        />\r\n                        <div className=\"mt-3\">\r\n                            <h4>{user.name}</h4>\r\n                            <p className=\"text-secondary mb-1\">\r\n                                {profession.name}\r\n                            </p>\r\n                            <div className=\"text-muted\">\r\n                                <i\r\n                                    className=\"bi bi-caret-down-fill text-primary\"\r\n                                    role=\"button\"\r\n                                ></i>\r\n                                <i\r\n                                    className=\"bi bi-caret-up text-secondary\"\r\n                                    role=\"button\"\r\n                                ></i>\r\n                                <span className=\"ms-2\">{user.rate}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nUserCard.propTypes = {\r\n    user: PropTypes.object\r\n};\r\n\r\nexport default UserCard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst Quality = ({ _id, color, name }) => {\r\n    return (\r\n        <span className={\"badge m-1 bg-\" + color} key={_id}>\r\n            {name}\r\n        </span>\r\n    );\r\n};\r\nQuality.propTypes = {\r\n    _id: PropTypes.string.isRequired,\r\n    color: PropTypes.string,\r\n    name: PropTypes.string\r\n};\r\n\r\nexport default Quality;\r\n","import httpService from \"./http.service\";\r\nconst qualityEndpoint = \"quality/\";\r\n\r\nconst qualityService = {\r\n    get: async (id) => {\r\n        const { data } = await httpService.get(qualityEndpoint + id);\r\n        return data;\r\n    },\r\n    fetchAll: async () => {\r\n        const { data } = await httpService.get(qualityEndpoint);\r\n        return data;\r\n    }\r\n};\r\nexport default qualityService;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport qualityService from \"../services/quality.service\";\r\n\r\nconst qualitiesSlice = createSlice({\r\n    name: \"qualities\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null,\r\n        lastFetch: null\r\n    },\r\n    reducers: {\r\n        qualitiesRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        qualitiesReceved: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.lastFetch = Date.now();\r\n            state.isLoading = false;\r\n        },\r\n        qualitiesRequestFiled: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        }\r\n    }\r\n});\r\n\r\nconst { reducer: qualitiesReducer, actions } = qualitiesSlice;\r\nconst { qualitiesRequested, qualitiesReceved, qualitiesRequestFiled } = actions;\r\n\r\nfunction isOutdated(date) {\r\n    if (Date.now() - date > 10 * 60 * 1000) {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport const loadQualitiesList = () => async (dispatch, getState) => {\r\n    const { lastFetch } = getState().qualities;\r\n    if (isOutdated(lastFetch)) {\r\n        dispatch(qualitiesRequested());\r\n        try {\r\n            const { content } = await qualityService.fetchAll();\r\n            dispatch(qualitiesReceved(content));\r\n        } catch (error) {\r\n            dispatch(qualitiesRequestFiled(error.message));\r\n        }\r\n    }\r\n};\r\n\r\nexport const getQualities = () => (state) => state.qualities.entities;\r\nexport const getQualitiesLoadingStatus = () => (state) =>\r\n    state.qualities.isLoading;\r\n\r\nexport const getQualitiesByIds = (qualitiesIds) => (state) => {\r\n    if (state.qualities.entities) {\r\n        const qualitiesArray = [];\r\n        for (const qualId of qualitiesIds) {\r\n            for (const quality of state.qualities.entities) {\r\n                if (quality._id === qualId) {\r\n                    qualitiesArray.push(quality);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return qualitiesArray;\r\n    }\r\n    return [];\r\n};\r\n\r\nexport default qualitiesReducer;\r\n","import Qualities from \"./qualitiesList\";\nexport default Qualities;\n","import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Quality from \"./quality\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getQualitiesByIds,\r\n    getQualitiesLoadingStatus,\r\n    loadQualitiesList\r\n} from \"../../../store/qualities\";\r\n\r\nconst QualitiesList = ({ qualities }) => {\r\n    const dispatch = useDispatch();\r\n    const qualitiesList = useSelector(getQualitiesByIds(qualities));\r\n    const isLoading = useSelector(getQualitiesLoadingStatus());\r\n\r\n    useEffect(() => {\r\n        dispatch(loadQualitiesList());\r\n    }, []);\r\n    if (isLoading) return \"Loading...\";\r\n    return (\r\n        <>\r\n            {qualitiesList.map((qual) => (\r\n                <Quality key={qual._id} {...qual} />\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nQualitiesList.propTypes = {\r\n    qualities: PropTypes.array\r\n};\r\n\r\nexport default QualitiesList;\r\n","import React from \"react\";\r\nimport Qualities from \"./qualities\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst QualitiesCard = ({ data }) => {\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\r\n                <h5 className=\"card-title\">\r\n                    <span>Качества</span>\r\n                </h5>\r\n                <p className=\"card-text\">\r\n                    <Qualities qualities={data} />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nQualitiesCard.propTypes = {\r\n    data: PropTypes.array\r\n};\r\n\r\nexport default QualitiesCard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MeetingsCard = ({ value }) => {\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body d-flex flex-column justify-content-center text-center\">\r\n                <h5 className=\"card-title\">\r\n                    <span>Встречи</span>\r\n                </h5>\r\n                <h1 className=\"display-1\">{value}</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nMeetingsCard.propTypes = {\r\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n};\r\n\r\nexport default MeetingsCard;\r\n","export function displayDate(data) {\n    const date = new Date(data);\n    const dateNow = new Date();\n    const yearDif = dateNow.getFullYear() - date.getFullYear();\n    if (yearDif === 0) {\n        const dayDif = dateNow.getDate() - date.getDate();\n        if (dayDif === 0) {\n            const hourDif = dateNow.getHours() - date.getHours();\n            if (hourDif === 0) {\n                const minutesDif = dateNow.getMinutes() - date.getMinutes();\n\n                if (minutesDif >= 0 && minutesDif < 5) return \"1 минуту назад\";\n                if (minutesDif >= 5 && minutesDif < 10) return \"5 минут назад\";\n                if (minutesDif >= 10 && minutesDif < 30) {\n                    return \"10 минут назад\";\n                }\n                return \"30 минут назад\";\n            }\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }\n\n        return `${date.getDate()} ${date.toLocaleString(\"default\", {\n            month: \"long\"\n        })}`;\n    }\n    return (\n        date.getFullYear() + \".\" + (date.getMonth() + 1) + \"_\" + date.getDate()\n    );\n}\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { displayDate } from \"../../../utils/displayDate\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCurrentUserId, getUserById } from \"../../../store/users\";\r\nconst Comment = ({\r\n    content,\r\n    created_at: created,\r\n    _id: id,\r\n    userId,\r\n    onRemove\r\n}) => {\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n    const user = useSelector(getUserById(userId));\r\n\r\n    return (\r\n        <div className=\"bg-light card-body  mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div className=\"d-flex flex-start \">\r\n                        <img\r\n                            src={user.image}\r\n                            className=\"rounded-circle shadow-1-strong me-3\"\r\n                            alt=\"avatar\"\r\n                            width=\"65\"\r\n                            height=\"65\"\r\n                        />\r\n                        <div className=\"flex-grow-1 flex-shrink-1\">\r\n                            <div className=\"mb-4\">\r\n                                <div className=\"d-flex justify-content-between align-items-center\">\r\n                                    <p className=\"mb-1 \">\r\n                                        {user && user.name}{\" \"}\r\n                                        <span className=\"small\">\r\n                                            - {displayDate(created)}\r\n                                        </span>\r\n                                    </p>\r\n                                    {currentUserId === userId && (\r\n                                        <button\r\n                                            className=\"btn btn-sm text-primary d-flex align-items-center\"\r\n                                            onClick={() => onRemove(id)}\r\n                                        >\r\n                                            <i className=\"bi bi-x-lg\"></i>\r\n                                        </button>\r\n                                    )}\r\n                                </div>\r\n                                <p className=\"small mb-0\">{content}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nComment.propTypes = {\r\n    content: PropTypes.string,\r\n    edited_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    created_at: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    userId: PropTypes.string,\r\n    onRemove: PropTypes.func,\r\n    _id: PropTypes.string\r\n};\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\nimport Comment from \"./comment\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CommentsList = ({ comments, onRemove }) => {\r\n    return comments.map((comment) => (\r\n        <Comment key={comment._id} {...comment} onRemove={onRemove} />\r\n    ));\r\n};\r\nCommentsList.propTypes = {\r\n    comment: PropTypes.array,\r\n    onRemove: PropTypes.func\r\n};\r\n\r\nexport default CommentsList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TextAreaField = ({ label, name, value, onChange, error }) => {\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label htmlFor={name}> {label}</label>\r\n            <div className=\"input-group has-validation\">\r\n                <textarea\r\n                    id={name}\r\n                    name={name}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    className={getInputClasses()}\r\n                />\r\n\r\n                {error && <div className=\"invalid-feedback \">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nTextAreaField.defaultProps = {\r\n    type: \"text\"\r\n};\r\nTextAreaField.propTypes = {\r\n    label: PropTypes.string,\r\n    type: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default TextAreaField;\r\n","export function validator(data, config) {\n    const errors = {};\n    function validate(validateMethod, data, config) {\n        let statusValidate;\n        switch (validateMethod) {\n            case \"isRequired\": {\n                if (typeof data === \"boolean\") {\n                    statusValidate = !data;\n                } else {\n                    statusValidate = data.trim() === \"\";\n                }\n                break;\n            }\n            case \"isEmail\": {\n                const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n                statusValidate = !emailRegExp.test(data);\n                break;\n            }\n            case \"isCapitalSymbol\": {\n                const capitalRegExp = /[A-Z]+/g;\n                statusValidate = !capitalRegExp.test(data);\n                break;\n            }\n            case \"isContainDigit\": {\n                const digitRegExp = /\\d+/g;\n                statusValidate = !digitRegExp.test(data);\n                break;\n            }\n            case \"min\": {\n                statusValidate = data.length < config.value;\n                break;\n            }\n            default:\n                break;\n        }\n        if (statusValidate) return config.message;\n    }\n    for (const fieldName in data) {\n        for (const validateMethod in config[fieldName]) {\n            const error = validate(\n                validateMethod,\n                data[fieldName],\n                config[fieldName][validateMethod]\n            );\n            if (error && !errors[fieldName]) {\n                errors[fieldName] = error;\n            }\n        }\n    }\n    return errors;\n}\n","import React, { useState } from \"react\";\r\nimport TextAreaField from \"../form/textAreaField\";\r\nimport { validator } from \"../../../utils/validator\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCommentForm = ({ onSubmit }) => {\r\n    const [data, setData] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n    const handleChange = (target) => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            [target.name]: target.value\r\n        }));\r\n    };\r\n    const validatorConfig = {\r\n        content: {\r\n            isRequired: {\r\n                message: \"Сообщение не может быть пустым\"\r\n            }\r\n        }\r\n    };\r\n\r\n    const validate = () => {\r\n        const errors = validator(data, validatorConfig);\r\n        setErrors(errors);\r\n        return Object.keys(errors).length === 0;\r\n    };\r\n    const clearForm = () => {\r\n        setData({});\r\n        setErrors({});\r\n    };\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const isValid = validate();\r\n        if (!isValid) return;\r\n        onSubmit(data);\r\n        clearForm();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Добавить комментарий</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <TextAreaField\r\n                    value={data.content || \"\"}\r\n                    onChange={handleChange}\r\n                    name=\"content\"\r\n                    error={errors.content}\r\n                />\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <button className=\"btn btn-primary\">Добавить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nAddCommentForm.propTypes = {\r\n    onSubmit: PropTypes.func\r\n};\r\n\r\nexport default AddCommentForm;\r\n","import CommentsList from \"./commentsList\";\r\nimport AddCommentForm from \"./addCommentForm\";\r\nexport default CommentsList;\r\nexport { AddCommentForm };\r\n","import httpService from \"./http.service\";\r\nconst commentEndpoint = \"comment/\";\r\n\r\nconst commentService = {\r\n    get: async (id) => {\r\n        const { data } = await httpService.get(commentEndpoint + id);\r\n        return data;\r\n    },\r\n    createComment: async (payload) => {\r\n        const { data } = await httpService.post(commentEndpoint, payload);\r\n        return data;\r\n    },\r\n    getComments: async (pageId) => {\r\n        const { data } = await httpService.get(commentEndpoint, {\r\n            params: {\r\n                orderBy: \"pageId\",\r\n                equalTo: `${pageId}`\r\n            }\r\n        });\r\n        return data;\r\n    },\r\n    removeComment: async (commentId) => {\r\n        const { data } = await httpService.delete(commentEndpoint + commentId);\r\n        return data;\r\n    }\r\n};\r\nexport default commentService;\r\n","import { createAction, createSlice } from \"@reduxjs/toolkit\";\r\nimport commentService from \"../services/comment.service\";\r\n\r\nconst commentsSlice = createSlice({\r\n    name: \"comments\",\r\n    initialState: {\r\n        entities: null,\r\n        isLoading: true,\r\n        error: null\r\n    },\r\n    reducers: {\r\n        commentsRequested: (state) => {\r\n            state.isLoading = true;\r\n        },\r\n        commentsReceived: (state, action) => {\r\n            state.entities = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n        commentsRequestFailed: (state, action) => {\r\n            state.error = action.payload;\r\n            state.isLoading = false;\r\n        },\r\n        commentCreated: (state, action) => {\r\n            if (!Array.isArray(state.entities)) {\r\n                state.entities = [];\r\n            }\r\n            state.entities.push(action.payload);\r\n        },\r\n        commentRemoved: (state, action) => {\r\n            state.entities = state.entities.filter(\r\n                (c) => c._id !== action.payload\r\n            );\r\n        }\r\n    }\r\n});\r\n\r\nconst { reducer: commentsReducer, actions } = commentsSlice;\r\nconst {\r\n    commentsRequested,\r\n    commentsReceived,\r\n    commentsRequestFailed,\r\n    commentCreated,\r\n    commentRemoved\r\n} = actions;\r\n\r\nconst commentCreateRequested = createAction(\"comments/commentCreateRequested\");\r\nconst createCommentFailed = createAction(\"comments/createCommentFailed\");\r\nconst commentRemoveRequested = createAction(\"comments/commenRemoveRequested\");\r\nconst commentRemoveFailed = createAction(\"comments/commentRemoveFailed\");\r\n\r\nexport const loadCommentsList = (UserId) => async (dispatch) => {\r\n    dispatch(commentsRequested());\r\n    try {\r\n        const { content } = await commentService.getComments(UserId);\r\n        dispatch(commentsReceived(content));\r\n    } catch (error) {\r\n        dispatch(commentsRequestFailed(error.message));\r\n    }\r\n};\r\n\r\nexport const createComment = (payload) => async (dispatch) => {\r\n    dispatch(commentCreateRequested());\r\n    try {\r\n        const { content } = await commentService.createComment(payload);\r\n        dispatch(commentCreated(content));\r\n    } catch (error) {\r\n        dispatch(createCommentFailed(error.message));\r\n    }\r\n};\r\n\r\nexport const removeComment = (payload) => async (dispatch) => {\r\n    dispatch(commentRemoveRequested());\r\n    try {\r\n        const { content } = await commentService.removeComment(payload);\r\n        console.log(payload);\r\n        if (!content) {\r\n            dispatch(commentRemoved(payload));\r\n        }\r\n    } catch (error) {\r\n        dispatch(commentRemoveFailed(error.message));\r\n    }\r\n};\r\n\r\nexport const getComments = () => (state) => state.comments.entities;\r\nexport const getCommentsLoadingStatus = () => (state) =>\r\n    state.comments.isLoading;\r\n\r\nexport default commentsReducer;\r\n","import { orderBy } from \"lodash\";\r\nimport React, { useEffect } from \"react\";\r\nimport CommentsList, { AddCommentForm } from \"../common/comments\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getComments,\r\n    getCommentsLoadingStatus,\r\n    loadCommentsList,\r\n    createComment,\r\n    removeComment\r\n} from \"../../store/comments\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Comments = () => {\r\n    const { userId } = useParams();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(loadCommentsList(userId));\r\n    }, [userId]);\r\n    const isLoading = useSelector(getCommentsLoadingStatus());\r\n\r\n    const comments = useSelector(getComments());\r\n\r\n    const handleSubmit = (data) => {\r\n        const commentData = {\r\n            ...data,\r\n            pageId: userId\r\n        };\r\n        dispatch(createComment(commentData));\r\n    };\r\n    const handleRemoveComment = (id) => {\r\n        dispatch(removeComment(id));\r\n    };\r\n    const sortedComments = orderBy(comments, [\"created_at\"], [\"desc\"]);\r\n    return (\r\n        <>\r\n            <div className=\"card mb-2\">\r\n                <div className=\"card-body \">\r\n                    <AddCommentForm onSubmit={handleSubmit} />\r\n                </div>\r\n            </div>\r\n            {sortedComments.length > 0 && (\r\n                <div className=\"card mb-3\">\r\n                    <div className=\"card-body \">\r\n                        <h2>Комментарии</h2>\r\n                        <hr />\r\n                        {!isLoading ? (\r\n                            <CommentsList\r\n                                comments={sortedComments}\r\n                                onRemove={handleRemoveComment}\r\n                            />\r\n                        ) : (\r\n                            \"Загрузка\"\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n","import UserPage from \"./userPage\";\r\nexport default UserPage;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport UserCard from \"../../ui/userCard\";\r\nimport QualitiesCard from \"../../ui/qualitiesCard\";\r\nimport Meetings from \"../../ui/meetingsCard\";\r\nimport Comments from \"../../ui/comments\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getUserById } from \"../../../store/users\";\r\n\r\nconst User = ({ userId }) => {\r\n    const user = useSelector(getUserById(userId));\r\n    return (\r\n        <>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"row gutters-sm\">\r\n                    {user ? (\r\n                        <>\r\n                            <div className=\"col-md-4 mb-3\">\r\n                                <UserCard user={user} />\r\n                                <QualitiesCard data={user.qualities} />\r\n                                <Meetings value={user.completedMeetings} />\r\n                            </div>\r\n                            <div className=\"col-md-8\">\r\n                                <Comments />\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <div className=\"col-md-4 mb-3\">\r\n                            <div className=\"position-absolute top-50 start-50 translate-middle\">\r\n                                <div className=\"spinner-border\" role=\"status\">\r\n                                    <span className=\"visually-hidden\">\r\n                                        Загрузка...\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nUser.propTypes = {\r\n    userId: PropTypes.string\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nconst Pagination = ({ itemsCount, pageSize, onPageChange, currentPage }) => {\n    const pageCount = Math.ceil(itemsCount / pageSize);\n    if (pageCount === 1) return null;\n    const pages = _.range(1, pageCount + 1);\n    return (\n        <nav>\n            <ul className=\"pagination\">\n                {pages.map((page) => (\n                    <li\n                        className={\n                            \"page-item\" +\n                            (page === currentPage ? \" active\" : \"\")\n                        }\n                        key={\"page\" + page}\n                    >\n                        <button\n                            className=\"page-link\"\n                            onClick={() => onPageChange(page)}\n                        >\n                            {page}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\nPagination.propTypes = {\n    itemsCount: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    currentPage: PropTypes.number.isRequired\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GroupList = ({\n    items,\n    valueProperty,\n    contentProperty,\n    onItemSelect,\n    selectedItem,\n    onClickClear\n}) => {\n    return (\n        <>\n            <ul className=\"list-group\">\n                {Object.keys(items).map((item) => (\n                    <li\n                        key={items[item][valueProperty]}\n                        className={\n                            \"list-group-item\" +\n                            (items[item] === selectedItem ? \" active\" : \"\")\n                        }\n                        onClick={() => onItemSelect(items[item])}\n                        role=\"button\"\n                    >\n                        {items[item][contentProperty]}\n                    </li>\n                ))}\n            </ul>\n            <button className=\"btn btn-secondary mt-2\" onClick={onClickClear}>\n                Очистить фильтр\n            </button>\n        </>\n    );\n};\nGroupList.defaultProps = {\n    valueProperty: \"_id\",\n    contentProperty: \"name\"\n};\n\nGroupList.propTypes = {\n    items: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    valueProperty: PropTypes.string.isRequired,\n    contentProperty: PropTypes.string.isRequired,\n    onItemSelect: PropTypes.func,\n    selectedItem: PropTypes.object,\n    onClickClear: PropTypes.func\n};\n\nexport default GroupList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SearchStatus = ({ users, selectedProf }) => {\n    const renderPhrase = (number) => {\n        const lastOne = Number(number.toString().slice(-1));\n        if (number > 4 && number < 15) return \"человек тусанет\";\n        if ([2, 3, 4].indexOf(lastOne) >= 0) return \"человека тусанут\";\n        if (lastOne === 1) return \"человек тусанет\";\n        return \"человек тусанет\";\n    };\n    return (\n        <h2>\n            <span className={\"badge \" + (users ? \"bg-primary\" : \"bg-danger\")}>\n                {users\n                    ? `${users + \" \" + renderPhrase(users)} с тобой сегодня`\n                    : selectedProf\n                    ? \"Никто из этой категории с тобой не тусанет\"\n                    : \"Никто с тобой не тусанет\"}\n            </span>\n        </h2>\n    );\n};\nSearchStatus.propTypes = {\n    users: PropTypes.number.isRequired,\n    selectedProf: PropTypes.object\n};\n\nexport default SearchStatus;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nconst BookMark = ({ status, ...rest }) => {\n    return (\n        <button {...rest}>\n            <i className={\"bi bi-bookmark\" + (status ? \"-heart-fill\" : \"\")}></i>\n        </button>\n    );\n};\nBookMark.propTypes = {\n    status: PropTypes.bool\n};\n\nexport default BookMark;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TableHeader = ({ onSort, selectedSort, columns }) => {\n    const handleSort = (item) => {\n        if (selectedSort.path === item) {\n            onSort({\n                ...selectedSort,\n                order: selectedSort.order === \"asc\" ? \"desc\" : \"asc\"\n            });\n        } else {\n            onSort({ path: item, order: \"asc\" });\n        }\n    };\n    return (\n        <thead>\n            <tr>\n                {Object.keys(columns).map((column) => (\n                    <th\n                        key={column}\n                        className={\n                            columns[column].path === selectedSort.path &&\n                            selectedSort.order === \"asc\"\n                                ? \"bi bi-caret-down-fill\"\n                                : columns[column].path === selectedSort.path &&\n                                  selectedSort.order === \"desc\"\n                                ? \"bi bi-caret-up-fill\"\n                                : \"\"\n                        }\n                        onClick={\n                            columns[column].path\n                                ? () => handleSort(columns[column].path)\n                                : undefined\n                        }\n                        {...{ role: columns[column].path && \"button\" }}\n                        scope=\"col\"\n                    >\n                        {columns[column].name}\n                    </th>\n                ))}\n            </tr>\n        </thead>\n    );\n};\n\nTableHeader.propTypes = {\n    onSort: PropTypes.func.isRequired,\n    selectedSort: PropTypes.object.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableHeader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport { Link } from \"react-router-dom\";\n\nconst TableBody = ({ data, columns }) => {\n    const renderContent = (item, column) => {\n        const component = columns[column].component;\n        if (column === \"name\") {\n            return (\n                <Link key={item._id} to={`/users/${item._id}`}>\n                    {item.name}\n                </Link>\n            );\n        }\n        if (columns[column].component) {\n            if (typeof component === \"function\") {\n                return component(item);\n            }\n\n            return component;\n        }\n        return _.get(item, columns[column].path);\n    };\n    return (\n        <tbody>\n            {data.map((item) => (\n                <tr key={item._id}>\n                    {Object.keys(columns).map((column) => (\n                        <td key={column}>{renderContent(item, column)}</td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    );\n};\n\nTableBody.propTypes = {\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.object.isRequired\n};\n\nexport default TableBody;\n","import Table from \"./table\";\nimport TableBody from \"./tableBody\";\nimport TableHeader from \"./tableHeader\";\nexport default Table;\n\nexport { TableBody, TableHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TableHeader from \"./tableHeader\";\nimport TableBody from \"./tableBody\";\n\nconst Table = ({ onSort, selectedSort, columns, data, children }) => {\n    return (\n        <table className=\"table\">\n            {children || (\n                <>\n                    <TableHeader {...{ onSort, selectedSort, columns }} />\n                    <TableBody {...{ columns, data }} />\n                </>\n            )}\n        </table>\n    );\n};\n\nTable.propTypes = {\n    onSort: PropTypes.func,\n    selectedSort: PropTypes.object,\n    columns: PropTypes.object,\n    data: PropTypes.array,\n    children: PropTypes.array\n};\n\nexport default Table;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProfessionById } from \"../../store/professions\";\r\n\r\nconst Profession = ({ id }) => {\r\n    const prof = useSelector(getProfessionById(id));\r\n    if (prof) return <p>{prof.name}</p>;\r\n    return \"Loading...\";\r\n};\r\nProfession.propTypes = {\r\n    id: PropTypes.string\r\n};\r\nexport default Profession;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport BookMark from \"../common/bookmark\";\r\nimport Table from \"../common/table\";\r\nimport Profession from \"./profession\";\r\nimport Qualities from \"./qualities\";\r\n\r\nconst UserTable = ({ users, selectedSort, onSort, onToggleBookMark }) => {\r\n    const columns = {\r\n        name: { path: \"name\", name: \"Имя\" },\r\n        qualities: {\r\n            name: \"Качетва\",\r\n            component: (user) => <Qualities qualities={user.qualities} />\r\n        },\r\n        professions: {\r\n            name: \"Профессия\",\r\n            component: (user) => <Profession id={user.profession} />\r\n        },\r\n        completedMeetings: {\r\n            path: \"completedMeetings\",\r\n            name: \"Встретился раз\"\r\n        },\r\n        rate: { path: \"rate\", name: \"Оценка\" },\r\n        bookmark: {\r\n            path: \"bookmark\",\r\n            name: \"Избранное\",\r\n            component: (user) => (\r\n                <BookMark\r\n                    status={user.bookmark}\r\n                    onClick={() => onToggleBookMark(user._id)}\r\n                />\r\n            )\r\n        }\r\n    };\r\n    return (\r\n        <Table\r\n            onSort={onSort}\r\n            selectedSort={selectedSort}\r\n            columns={columns}\r\n            data={users}\r\n        />\r\n    );\r\n};\r\n\r\nUserTable.propTypes = {\r\n    users: PropTypes.array.isRequired,\r\n    onToggleBookMark: PropTypes.func.isRequired,\r\n    onSort: PropTypes.func.isRequired,\r\n    selectedSort: PropTypes.object.isRequired\r\n};\r\n\r\nexport default UserTable;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SearchField = ({ onChange, value }) => {\n    return (\n        <>\n            <div className=\"form-floating mb-3 mt-3\">\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"searchInput\"\n                    placeholder=\"Поиск\"\n                    value={value}\n                    onChange={onChange}\n                />\n                <label htmlFor=\"searchInput\">Поиск</label>\n            </div>\n        </>\n    );\n};\n\nSearchField.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.string\n};\n\nexport default SearchField;\n","import UsersListPage from \"./usersListPage\";\nexport default UsersListPage;\n","import React, { useState, useEffect } from \"react\";\r\nimport Pagination from \"../../common/pagination\";\r\nimport { paginate } from \"../../../utils/paginate\";\r\nimport GroupList from \"../../common/groupList\";\r\nimport SearchStatus from \"../../ui/searchStatus\";\r\nimport UserTable from \"../../ui/usersTable\";\r\nimport _ from \"lodash\";\r\nimport SearchField from \"../../searchField\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProfessions } from \"../../../store/professions\";\r\nimport { getCurrentUserId, getUsersList } from \"../../../store/users\";\r\n\r\nconst UsersListPage = () => {\r\n    const pageSize = 8;\r\n    const professions = useSelector(getProfessions());\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedProf, setSelectedProf] = useState();\r\n    const [sortBy, setSortBy] = useState({ path: \"name\", order: \"asc\" });\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    const users = useSelector(getUsersList());\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n\r\n    const handleToggleBookMark = (id) => {\r\n        console.log(id);\r\n    };\r\n\r\n    const handleDelete = (id) => {\r\n        console.log(id);\r\n    };\r\n\r\n    const handlePageChange = (pageIndex) => {\r\n        setCurrentPage(pageIndex);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setCurrentPage(1);\r\n    }, [selectedProf]);\r\n    const handleProfessionSelect = (item) => {\r\n        setSelectedProf(item);\r\n        setSearch(\"\");\r\n    };\r\n\r\n    const handleSort = (item) => {\r\n        setSortBy(item);\r\n    };\r\n\r\n    function filterUsers(data) {\r\n        const filteredUsers = selectedProf\r\n            ? data.filter((user) => user.profession._id === selectedProf._id)\r\n            : data.filter((user) =>\r\n                  user.name.toLowerCase().includes(search.toLowerCase())\r\n              );\r\n        return filteredUsers.filter((u) => u._id !== currentUserId);\r\n    }\r\n    const filteredUsers = filterUsers(users);\r\n    const count = filteredUsers.length;\r\n    const sortedUsers = _.orderBy(filteredUsers, [sortBy.path], [sortBy.order]);\r\n    const userCrop = paginate(sortedUsers, currentPage, pageSize);\r\n    useEffect(() => {\r\n        if (!userCrop.length && count) {\r\n            setCurrentPage((page) => page - 1);\r\n        }\r\n    }, [handleDelete]);\r\n\r\n    const clearFilter = () => {\r\n        setSelectedProf();\r\n    };\r\n\r\n    const handleSearch = ({ target }) => {\r\n        setSearch(target.value);\r\n        setSelectedProf();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex\">\r\n                {!professions ? (\r\n                    <div\r\n                        className=\"spinner-border text-secondary\"\r\n                        role=\"status\"\r\n                    >\r\n                        <span className=\"visually-hidden\">Загрузка...</span>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"d-flex flex-column flex-shrink-0 p-3\">\r\n                        <GroupList\r\n                            selectedItem={selectedProf}\r\n                            items={professions}\r\n                            onItemSelect={handleProfessionSelect}\r\n                            onClickClear={clearFilter}\r\n                        />\r\n                    </div>\r\n                )}\r\n                <div className=\"d-flex flex-column flex-grow-1 p-3\">\r\n                    <SearchStatus users={count} selectedProf={selectedProf} />\r\n                    <SearchField value={search} onChange={handleSearch} />\r\n                    {count > 0 && (\r\n                        <UserTable\r\n                            users={userCrop}\r\n                            onDelete={handleDelete}\r\n                            onToggleBookMark={handleToggleBookMark}\r\n                            onSort={handleSort}\r\n                            selectedSort={sortBy}\r\n                        />\r\n                    )}\r\n                    <div className=\"d-flex justify-content-center\">\r\n                        <Pagination\r\n                            itemsCount={count}\r\n                            pageSize={pageSize}\r\n                            currentPage={currentPage}\r\n                            onPageChange={handlePageChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UsersListPage;\r\n","export function paginate(items, pageNumber, pageSize) {\n    const startIndex = (pageNumber - 1) * pageSize;\n    return [...items].splice(startIndex, pageSize);\n}\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TextField = ({ label, type, name, value, onChange, error }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-control\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n    const toggleShowPassword = () => {\r\n        setShowPassword((prevState) => !prevState);\r\n    };\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <div className=\"input-group has-validation\">\r\n                <input\r\n                    type={showPassword ? \"text\" : type}\r\n                    id={name}\r\n                    name={name}\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    className={getInputClasses()}\r\n                />\r\n                {type === \"password\" && (\r\n                    <button\r\n                        className=\"btn btn-outline-secondary\"\r\n                        type=\"button\"\r\n                        onClick={toggleShowPassword}\r\n                    >\r\n                        <i\r\n                            className={\r\n                                \"bi bi-eye\" + (showPassword ? \"-slash\" : \"\")\r\n                            }\r\n                        ></i>\r\n                    </button>\r\n                )}\r\n                {error && <div className=\"invalid-feedback\">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nTextField.defaultProps = {\r\n    type: \"text\"\r\n};\r\n\r\nTextField.propTypes = {\r\n    label: PropTypes.string,\r\n    type: PropTypes.string,\r\n    name: PropTypes.string,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default TextField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SelectField = ({\r\n    label,\r\n    value,\r\n    onChange,\r\n    defaultOption,\r\n    options,\r\n    error,\r\n    name\r\n}) => {\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-select\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n\r\n    const optionsArray =\r\n        !Array.isArray(options) && typeof options === \"object\"\r\n            ? Object.values(options)\r\n            : options;\r\n\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label htmlFor={name} className=\"form-label\">\r\n                {label}\r\n            </label>\r\n            <select\r\n                className={getInputClasses()}\r\n                id={name}\r\n                name={name}\r\n                value={value}\r\n                onChange={handleChange}\r\n            >\r\n                <option disabled value=\"\">\r\n                    {defaultOption}\r\n                </option>\r\n                {optionsArray.length > 0 &&\r\n                    optionsArray.map((option) => (\r\n                        <option value={option.value} key={option.value}>\r\n                            {option.label}\r\n                        </option>\r\n                    ))}\r\n            </select>\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nSelectField.propTypes = {\r\n    defaultOption: PropTypes.string,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    error: PropTypes.string,\r\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n    name: PropTypes.string\r\n};\r\n\r\nexport default SelectField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst RadioField = ({ options, name, onChange, value, label }) => {\r\n    const handleChange = ({ target }) => {\r\n        onChange({ name: target.name, value: target.value });\r\n    };\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label htmlFor=\"validationCustom04\" className=\"form-label\">\r\n                {label}\r\n            </label>\r\n            <div>\r\n                {options.map((option) => (\r\n                    <div\r\n                        key={option.name + \"_\" + option.value}\r\n                        className=\"form-check form-check-inline\"\r\n                    >\r\n                        <input\r\n                            className=\"form-check-input\"\r\n                            type=\"radio\"\r\n                            name={name}\r\n                            id={option.name + \"_\" + option.value}\r\n                            checked={option.value === value}\r\n                            value={option.value}\r\n                            onChange={handleChange}\r\n                        />\r\n                        <label\r\n                            className=\"form-check-label\"\r\n                            htmlFor={option.name + \"_\" + option.value}\r\n                        >\r\n                            {option.name}\r\n                        </label>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nRadioField.propTypes = {\r\n    label: PropTypes.string,\r\n    options: PropTypes.array,\r\n    name: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    value: PropTypes.string\r\n};\r\n\r\nexport default RadioField;\r\n","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst MultiSelectField = ({ options, onChange, name, label, defaultValue }) => {\r\n    const optionsArray =\r\n        !Array.isArray(options) && typeof options === \"object\"\r\n            ? Object.values(options)\r\n            : options;\r\n    const handleChange = (value) => {\r\n        onChange({ name: name, value });\r\n    };\r\n    return (\r\n        <div className=\"mb-4\">\r\n            <label className=\"form-label\">{label}</label>\r\n            <Select\r\n                isMulti\r\n                closeMenuOnSelect={false}\r\n                defaultValue={defaultValue}\r\n                options={optionsArray}\r\n                className=\"basic-multi-select\"\r\n                classNamePrefix=\"select\"\r\n                onChange={handleChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nMultiSelectField.propTypes = {\r\n    onChange: PropTypes.func,\r\n    options: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n    label: PropTypes.string,\r\n    name: PropTypes.string,\r\n    defaultValue: PropTypes.array\r\n};\r\n\r\nexport default MultiSelectField;\r\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nconst BackHistoryButton = () => {\n    const history = useHistory();\n    return (\n        <button className=\"btn btn-primary\" onClick={() => history.goBack()}>\n            <i className=\"bi bi-caret-left\"></i>\n            Назад\n        </button>\n    );\n};\n\nexport default BackHistoryButton;\n","import EditUserPage from \"./editUserPage\";\nexport default EditUserPage;\n","import React, { useEffect, useState } from \"react\";\r\nimport { validator } from \"../../../utils/validator\";\r\nimport TextField from \"../../common/form/textField\";\r\nimport SelectField from \"../../common/form/selectField\";\r\nimport RadioField from \"../../common/form/radioField\";\r\nimport MultiSelectField from \"../../common/form/multiSelectField\";\r\nimport BackHistoryButton from \"../../common/backButton\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getQualities } from \"../../../store/qualities\";\r\nimport { getProfessions } from \"../../../store/professions\";\r\nimport { getCurrentUserData, updateUserData } from \"../../../store/users\";\r\n\r\nconst EditUserPage = () => {\r\n    const dispatch = useDispatch();\r\n    const currentUser = useSelector(getCurrentUserData());\r\n    const professions = useSelector(getProfessions());\r\n    const professionsList = professions.map((p) => ({\r\n        label: p.name,\r\n        value: p._id\r\n    }));\r\n\r\n    const qualities = useSelector(getQualities());\r\n    const qualitiesList = qualities.map((q) => ({\r\n        value: q._id,\r\n        label: q.name,\r\n        color: q.color\r\n    }));\r\n    const getQuality = (id) => {\r\n        return qualities.find((q) => q._id === id);\r\n    };\r\n\r\n    const userQualities = currentUser.qualities.map((q) => {\r\n        const qual = getQuality(q);\r\n        return {\r\n            value: qual._id,\r\n            label: qual.name\r\n        };\r\n    });\r\n    const [data, setData] = useState({\r\n        name: currentUser.name,\r\n        email: currentUser.email,\r\n        profession: currentUser.profession,\r\n        sex: currentUser.sex,\r\n        qualities: userQualities\r\n    });\r\n    const [errors, setErrors] = useState({});\r\n    console.log(data);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const isValid = validate();\r\n        if (!isValid) return;\r\n        console.log(data);\r\n        const updatedData = {\r\n            ...currentUser,\r\n            ...data,\r\n            qualities: data.qualities.map((q) => q.value)\r\n        };\r\n        console.log(\"Updated data: \", updatedData);\r\n        dispatch(updateUserData(updatedData));\r\n    };\r\n\r\n    const validatorConfig = {\r\n        email: {\r\n            isRequired: {\r\n                message: \"Электронная почта обязательна для заполнения\"\r\n            },\r\n            isEmail: {\r\n                message: \"Email введен некорректно\"\r\n            }\r\n        },\r\n        name: {\r\n            isRequired: {\r\n                message: \"Имя обязательно для заполнения\"\r\n            }\r\n        },\r\n        password: {\r\n            isRequired: {\r\n                message: \"Пароль обязателен для заполнения\"\r\n            },\r\n            isCapitalSymbol: {\r\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\r\n            },\r\n            isContainDigit: {\r\n                message: \"Пароль должен содержать хотя бы одно число\"\r\n            },\r\n            min: {\r\n                message: \"Пароль должен состоять минимум из 8 символов\",\r\n                value: 8\r\n            }\r\n        },\r\n        profession: {\r\n            isRequired: {\r\n                message: \"Обязательно выберите вашу профессию\"\r\n            }\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        validate();\r\n    }, [data]);\r\n    const handleChange = (target) => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            [target.name]: target.value\r\n        }));\r\n    };\r\n    const validate = () => {\r\n        const errors = validator(data, validatorConfig);\r\n        setErrors(errors);\r\n        return Object.keys(errors).length === 0;\r\n    };\r\n    const isValid = Object.keys(errors).length === 0;\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <BackHistoryButton />\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-md-3 shadow p-4\">\r\n                    {data && (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <TextField\r\n                                label=\"Имя\"\r\n                                name=\"name\"\r\n                                value={data.name}\r\n                                onChange={handleChange}\r\n                                error={errors.name}\r\n                            />\r\n                            <TextField\r\n                                label=\"Электронная почта\"\r\n                                name=\"email\"\r\n                                value={data.email}\r\n                                onChange={handleChange}\r\n                                error={errors.email}\r\n                            />\r\n                            <SelectField\r\n                                label=\"Выбери свою профессию\"\r\n                                defaultOption=\"Choose...\"\r\n                                options={professionsList}\r\n                                name=\"profession\"\r\n                                onChange={handleChange}\r\n                                value={data.profession}\r\n                                error={errors.profession}\r\n                            />\r\n                            <RadioField\r\n                                options={[\r\n                                    { name: \"Male\", value: \"male\" },\r\n                                    { name: \"Female\", value: \"female\" },\r\n                                    { name: \"Other\", value: \"other\" }\r\n                                ]}\r\n                                value={data.sex}\r\n                                name=\"sex\"\r\n                                onChange={handleChange}\r\n                                label=\"Выберите ваш пол\"\r\n                            />\r\n                            <MultiSelectField\r\n                                defaultValue={userQualities}\r\n                                options={qualitiesList}\r\n                                onChange={handleChange}\r\n                                name=\"qualities\"\r\n                                label=\"Выберите ваши качества\"\r\n                            />\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={!isValid}\r\n                                className=\"btn btn-success w-100 mx-auto\"\r\n                            >\r\n                                Сохранить\r\n                            </button>\r\n                        </form>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditUserPage;\r\n","import PropTypes from \"prop-types\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDataStatus, loadUsersList } from \"../../../store/users\";\r\n\r\nconst UsersLoader = ({ children }) => {\r\n    const dataStatus = useSelector(getDataStatus());\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        if (!dataStatus) dispatch(loadUsersList());\r\n    }, []);\r\n    if (!dataStatus) return \"Загрузка...\";\r\n    return children;\r\n};\r\n\r\nUsersLoader.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\n\r\nexport default UsersLoader;\r\n","import React from \"react\";\r\nimport UserPage from \"../components/page/userPage\";\r\nimport UsersListPage from \"../components/page/usersListPage\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport EditUserPage from \"../components/page/editUserPage\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCurrentUserId } from \"../store/users\";\r\nimport UsersLoader from \"../components/ui/hoc/usersLoader\";\r\n\r\nconst Users = () => {\r\n    const params = useParams();\r\n    const { userId, edit } = params;\r\n    const currentUserId = useSelector(getCurrentUserId());\r\n    return (\r\n        <UsersLoader>\r\n            {userId ? (\r\n                edit ? (\r\n                    userId === currentUserId ? (\r\n                        <EditUserPage />\r\n                    ) : (\r\n                        <Redirect to={`/users/${currentUserId}/edit`} />\r\n                    )\r\n                ) : (\r\n                    <UserPage userId={userId} />\r\n                )\r\n            ) : (\r\n                <UsersListPage />\r\n            )}\r\n        </UsersLoader>\r\n    );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CheckBoxField = ({ name, value, onChange, children, error }) => {\r\n    const handleChange = () => {\r\n        onChange({ name: name, value: !value });\r\n    };\r\n    const getInputClasses = () => {\r\n        return \"form-check-input\" + (error ? \" is-invalid\" : \"\");\r\n    };\r\n    return (\r\n        <div className=\"form-check mb-4\">\r\n            <input\r\n                className={getInputClasses()}\r\n                type=\"checkbox\"\r\n                value=\"\"\r\n                id={name}\r\n                onChange={handleChange}\r\n                checked={value}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor={name}>\r\n                {children}\r\n            </label>\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nCheckBoxField.propTypes = {\r\n    name: PropTypes.string,\r\n    value: PropTypes.bool,\r\n    onChange: PropTypes.func,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ]),\r\n    error: PropTypes.string\r\n};\r\n\r\nexport default CheckBoxField;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { validator } from \"../../utils/validator\";\r\nimport TextField from \"../common/form/textField\";\r\nimport CheckBoxField from \"../common/form/checkBoxField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAuthErrors, login } from \"../../store/users\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst LoginForm = () => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        stayOn: false\r\n    });\r\n    const loginError = useSelector(getAuthErrors());\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    const handleChange = (target) => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            [target.name]: target.value\r\n        }));\r\n    };\r\n    const validatorConfig = {\r\n        email: {\r\n            isRequired: {\r\n                message: `Электронная почта обязательна для заполнения`\r\n            },\r\n            isEmail: {\r\n                message: `Email введен не корректно`\r\n            }\r\n        },\r\n        password: {\r\n            isRequired: {\r\n                message: `Пароль обязателен для заполнения`\r\n            },\r\n            isCapitalSymbol: {\r\n                message: `Пароль должен содержать хотя бы одну заглавную букву`\r\n            },\r\n            isContainDigit: {\r\n                message: `Пароль должен содержать хотя бы одно число`\r\n            },\r\n            min: {\r\n                message: `Пароль должен состоять минимум из 8 символов`,\r\n                value: 8\r\n            }\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        validate();\r\n    }, [data]);\r\n    const validate = () => {\r\n        const errors = validator(data, validatorConfig);\r\n        setErrors(errors);\r\n        return Object.keys(errors).length === 0;\r\n    };\r\n\r\n    const isValid = Object.keys(errors).length === 0;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const isValid = validate();\r\n        if (!isValid) return null;\r\n        const redirect = history.location.state\r\n            ? history.location.state.from.pathname\r\n            : \"/\";\r\n        dispatch(login({ payload: data, redirect }));\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <TextField\r\n                label=\"Почта\"\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors.email}\r\n            />\r\n            <TextField\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                error={errors.password}\r\n            />\r\n            <CheckBoxField\r\n                value={data.stayOn}\r\n                onChange={handleChange}\r\n                name=\"stayOn\"\r\n            >\r\n                Запомнить меня\r\n            </CheckBoxField>\r\n            {loginError && <p className=\"text-danger\">{loginError}</p>}\r\n            <button\r\n                disabled={!isValid}\r\n                className=\"btn btn-primary w-100 mx-auto\"\r\n            >\r\n                Войти\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { validator } from \"../../utils/validator\";\r\nimport TextField from \"../common/form/textField\";\r\nimport SelectField from \"../common/form/selectField\";\r\nimport RadioField from \"../common/form/radioField\";\r\nimport MultiSelectField from \"../common/form/multiSelectField\";\r\nimport CheckBoxField from \"../common/form/checkBoxField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getQualities } from \"../../store/qualities\";\r\nimport { getProfessions } from \"../../store/professions\";\r\nimport { signUp } from \"../../store/users\";\r\n\r\nconst RegisterForm = () => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        profession: \"\",\r\n        sex: \"male\",\r\n        name: \"\",\r\n        qualities: [],\r\n        license: false\r\n    });\r\n    const qualities = useSelector(getQualities());\r\n    const professions = useSelector(getProfessions());\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const handleChange = (target) => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            [target.name]: target.value\r\n        }));\r\n    };\r\n    const validatorConfig = {\r\n        email: {\r\n            isRequired: {\r\n                message: \"Электронная почта обязательна для заполнения\"\r\n            },\r\n            isEmail: {\r\n                message: \"Email введен некорректно\"\r\n            }\r\n        },\r\n        name: {\r\n            isRequired: {\r\n                message: \"Имя обязательно для заполнения\"\r\n            }\r\n        },\r\n        password: {\r\n            isRequired: {\r\n                message: \"Пароль обязателен для заполнения\"\r\n            },\r\n            isCapitalSymbol: {\r\n                message: \"Пароль должен содержать хотя бы одну заглавную букву\"\r\n            },\r\n            isContainDigit: {\r\n                message: \"Пароль должен содержать хотя бы одно число\"\r\n            },\r\n            min: {\r\n                message: \"Пароль должен состоять минимум из 8 символов\",\r\n                value: 8\r\n            }\r\n        },\r\n        profession: {\r\n            isRequired: {\r\n                message: \"Обязательно выберите вашу профессию\"\r\n            }\r\n        },\r\n        license: {\r\n            isRequired: {\r\n                message:\r\n                    \"Вы не можете использовать наш сервис без подтверждения лицензионного соглашения\"\r\n            }\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        validate();\r\n    }, [data]);\r\n    const validate = () => {\r\n        const errors = validator(data, validatorConfig);\r\n        setErrors(errors);\r\n        return Object.keys(errors).length === 0;\r\n    };\r\n    const isValid = Object.keys(errors).length === 0;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const isValid = validate();\r\n        if (!isValid) return;\r\n        const newData = {\r\n            ...data,\r\n            qualities: data.qualities.map((q) => q.value)\r\n        };\r\n        dispatch(signUp(newData));\r\n    };\r\n\r\n    const qualitiesList = qualities.map((q) => ({\r\n        label: q.name,\r\n        value: q._id\r\n    }));\r\n    const ProfessionsList = professions.map((p) => ({\r\n        label: p.name,\r\n        value: p._id\r\n    }));\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <TextField\r\n                label=\"Почта\"\r\n                name=\"email\"\r\n                value={data.email}\r\n                onChange={handleChange}\r\n                error={errors.email}\r\n            />\r\n            <TextField\r\n                label=\"Имя\"\r\n                name=\"name\"\r\n                value={data.name}\r\n                onChange={handleChange}\r\n                error={errors.name}\r\n            />\r\n            <TextField\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={data.password}\r\n                onChange={handleChange}\r\n                error={errors.password}\r\n            />\r\n            <SelectField\r\n                label=\"Профессия\"\r\n                defaultOption=\"Выбрать\"\r\n                name=\"profession\"\r\n                options={ProfessionsList}\r\n                onChange={handleChange}\r\n                value={data.profession}\r\n                error={errors.profession}\r\n            />\r\n            <RadioField\r\n                options={[\r\n                    { name: \"Мужской\", value: \"male\" },\r\n                    { name: \"Женский\", value: \"female\" },\r\n                    { name: \"Другой\", value: \"other\" }\r\n                ]}\r\n                value={data.sex}\r\n                name=\"sex\"\r\n                onChange={handleChange}\r\n                label=\"Пол\"\r\n            />\r\n            <MultiSelectField\r\n                options={qualitiesList}\r\n                onChange={handleChange}\r\n                defaultValue={data.qualities}\r\n                name=\"qualities\"\r\n                label=\"Качества\"\r\n            />\r\n            <CheckBoxField\r\n                value={data.license}\r\n                onChange={handleChange}\r\n                name=\"license\"\r\n                error={errors.license}\r\n            >\r\n                Подтвердить <a>лицензионное соглашение</a>\r\n            </CheckBoxField>\r\n            <button\r\n                disabled={!isValid}\r\n                className=\"btn btn-primary w-100 mx-auto\"\r\n            >\r\n                Зарегистрироваться\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport LoginForm from \"../components/ui/loginForm\";\nimport RegisterForm from \"../components/ui/registerForm\";\n\nconst Login = () => {\n    const { type } = useParams();\n    const [formType, setFormType] = useState(\n        type === \"register\" ? type : \"login\"\n    );\n    const toggleFormType = (params) => {\n        setFormType((prevState) =>\n            prevState === \"register\" ? \"login\" : \"register\"\n        );\n    };\n    return (\n        <>\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col-md-6 offset-md-3 p-4\">\n                        {formType === \"register\" ? (\n                            <>\n                                <h3 className=\"mb-4\">Регистрация</h3>\n                                <RegisterForm />\n                                <p>\n                                    Зарегистрированы?{\" \"}\n                                    <a role=\"button\" onClick={toggleFormType}>\n                                        Войти\n                                    </a>\n                                </p>\n                            </>\n                        ) : (\n                            <>\n                                <h3 className=\"mb-4\">Авторизация</h3>\n                                <LoginForm />\n                                <p>\n                                    Нет аккаунта?{\" \"}\n                                    <a role=\"button\" onClick={toggleFormType}>\n                                        Зарегистрироваться\n                                    </a>\n                                </p>\n                            </>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Login;\n","import { useEffect, useState } from \"react\";\r\nimport professions from \"../mockData/professions.json\";\r\nimport qualities from \"../mockData/qualities.json\";\r\nimport users from \"../mockData/users.json\";\r\nimport httpService from \"../services/http.service\";\r\n\r\nconst useMockData = () => {\r\n    const statusConsts = {\r\n        idle: \"Не выполнялось\",\r\n        pending: \"В процессе\",\r\n        successed: \"Выполнено\",\r\n        error: \"Произошла ошибка\"\r\n    };\r\n    const [error, setError] = useState(null);\r\n    const [status, setStatus] = useState(statusConsts.idle);\r\n    const [progress, setProgress] = useState(0);\r\n    const [count, setCount] = useState(0);\r\n    const summaryCount = professions.length + qualities.length + users.length;\r\n\r\n    const incrementCount = () => {\r\n        setCount((prevState) => prevState + 1);\r\n    };\r\n    const updateProgress = () => {\r\n        if (count !== 0 && status === statusConsts.idle) {\r\n            setStatus(statusConsts.pending);\r\n        }\r\n        const newProgress = Math.floor((count / summaryCount) * 100);\r\n        if (progress < newProgress) {\r\n            setProgress(() => newProgress);\r\n        }\r\n        if (newProgress === 100) {\r\n            setStatus(statusConsts.successed);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        updateProgress();\r\n    }, [count]);\r\n    async function initialize() {\r\n        try {\r\n            for (const prof of professions) {\r\n                await httpService.put(\"profession/\" + prof._id, prof);\r\n                incrementCount();\r\n            }\r\n            for (const user of users) {\r\n                await httpService.put(\"user/\" + user._id, user);\r\n                incrementCount();\r\n            }\r\n            for (const qual of qualities) {\r\n                await httpService.put(\"quality/\" + qual._id, qual);\r\n                incrementCount();\r\n            }\r\n        } catch (error) {\r\n            setError(error);\r\n            setStatus(statusConsts.error);\r\n        }\r\n    }\r\n    return { error, initialize, progress, status };\r\n};\r\n\r\nexport default useMockData;\r\n","import React from \"react\";\r\nimport useMockData from \"../utils/mockData\";\r\n\r\nconst Main = () => {\r\n    const { error, initialize, progress, status } = useMockData();\r\n    const handleClick = () => {\r\n        initialize();\r\n    };\r\n    const widthProgress = { width: `${progress}%` };\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h1>Главная</h1>\r\n            <div className=\"card p-3 mt-5\">\r\n                <h3>Инициализация данных в FireBase</h3>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    <li className=\"list-group-item\">Статус - {status}</li>\r\n                    <li className=\"list-group-item m-2\">\r\n                        <div className=\"progress\">\r\n                            <div\r\n                                className={\r\n                                    progress !== 100\r\n                                        ? \"progress-bar bg-warning\"\r\n                                        : \"progress-bar bg-success\"\r\n                                }\r\n                                role=\"progressbar\"\r\n                                style={widthProgress}\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                            >\r\n                                {progress}%\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                    {error && (\r\n                        <li className=\"list-group-item\">Ошибка - {error}</li>\r\n                    )}\r\n                </ul>\r\n                <button\r\n                    className=\"btn btn-outline-secondary mt-3\"\r\n                    onClick={handleClick}\r\n                >\r\n                    Инициализировать\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { logOut } from \"../store/users\";\r\n\r\nconst LogOut = () => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(logOut());\r\n    }, []);\r\n    return <h1>Загрузка</h1>;\r\n};\r\n\r\nexport default LogOut;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getCurrentUserData } from \"../../store/users\";\r\nconst NavProfile = () => {\r\n    const [isOpen, setOpen] = useState(false);\r\n    const currentUser = useSelector(getCurrentUserData());\r\n    const toggleMenu = () => {\r\n        setOpen((prevState) => !prevState);\r\n    };\r\n    if (!currentUser) return \"Загрузка...\";\r\n    return (\r\n        <div className=\"dropdown\" onClick={toggleMenu}>\r\n            <div className=\"btn dropdown-toggle d-flex align-items-center\">\r\n                <div className=\"me-2 text-light\">{currentUser.name}</div>\r\n                <img\r\n                    src={currentUser.image}\r\n                    alt=\"\"\r\n                    height=\"40\"\r\n                    className=\"img-responsive rounded-circle\"\r\n                />\r\n            </div>\r\n            <div className={\"w-100 dropdown-menu\" + (isOpen ? \" show\" : \"\")}>\r\n                <Link\r\n                    to={`/users/${currentUser._id}`}\r\n                    className=\"dropdown-item\"\r\n                >\r\n                    Профиль\r\n                </Link>\r\n                <Link to=\"/logout\" className=\"dropdown-item\">\r\n                    Выход\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavProfile;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getIsLoggedIn } from \"../../store/users\";\r\nimport NavProfile from \"./navProfile\";\r\n\r\nconst NavBar = () => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    return (\r\n        <nav className=\"navbar bg-secondary mb-3\">\r\n            <div className=\"container-fluid\">\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link text-light\" to=\"/\">\r\n                            Главная\r\n                        </Link>\r\n                    </li>\r\n                    {isLoggedIn && (\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link text-light\" to=\"/users\">\r\n                                Пользователи\r\n                            </Link>\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n                <div className=\"d-flex\">\r\n                    {isLoggedIn ? (\r\n                        <NavProfile />\r\n                    ) : (\r\n                        <Link className=\"nav-link text-light\" to=\"/login\">\r\n                            Авторизация\r\n                        </Link>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getIsLoggedIn } from \"../../store/users\";\r\nconst ProtectedRoute = ({ component: Component, children, ...rest }) => {\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (!isLoggedIn) {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: {\r\n                                    from: props.location\r\n                                }\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n                return Component ? <Component {...props} /> : children;\r\n            }}\r\n        />\r\n    );\r\n};\r\nProtectedRoute.propTypes = {\r\n    component: PropTypes.func,\r\n    location: PropTypes.object,\r\n    children: PropTypes.oneOfType(\r\n        [PropTypes.arrayOf(PropTypes.node)],\r\n        PropTypes.node\r\n    )\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","import PropTypes from \"prop-types\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadProfessionsList } from \"../../../store/professions\";\r\nimport { loadQualitiesList } from \"../../../store/qualities\";\r\nimport {\r\n    getIsLoggedIn,\r\n    getUsersLoadingStatus,\r\n    loadUsersList\r\n} from \"../../../store/users\";\r\n\r\nconst AppLoader = ({ children }) => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector(getIsLoggedIn());\r\n    const usersStatusLoading = useSelector(getUsersLoadingStatus());\r\n    useEffect(() => {\r\n        dispatch(loadQualitiesList());\r\n        dispatch(loadProfessionsList());\r\n        if (isLoggedIn) {\r\n            dispatch(loadUsersList());\r\n        }\r\n    }, [isLoggedIn]);\r\n    if (usersStatusLoading) {\r\n        return \"Загрузка...\";\r\n    }\r\n    return children;\r\n};\r\n\r\nAppLoader.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n};\r\n\r\nexport default AppLoader;\r\n","import React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n// import { ToastContainer } from \"react-toastify\";\r\nimport Users from \"./layouts/users\";\r\nimport Login from \"./layouts/login\";\r\nimport Main from \"./layouts/main\";\r\nimport LogOut from \"./layouts/logOut\";\r\nimport NavBar from \"./components/ui/navBar\";\r\nimport ProtectedRoute from \"./components/common/protectedRoute\";\r\nimport AppLoader from \"./components/ui/hoc/appLoader\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <AppLoader>\r\n                <NavBar />\r\n                <Switch>\r\n                    <ProtectedRoute\r\n                        path=\"/users/:userId?/:edit?\"\r\n                        component={Users}\r\n                    />\r\n                    <Route path=\"/login/:type?\" component={Login} />\r\n                    <Route path=\"/logout\" component={LogOut} />\r\n                    <Route path=\"/\" exact component={Main} />\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </AppLoader>\r\n            {/* <ToastContainer /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport qualitiesReducer from \"./qualities\";\r\nimport professionsReducer from \"./professions\";\r\nimport usersReducer from \"./users\";\r\nimport commentsReducer from \"./comments\";\r\n\r\nconst rootReducer = combineReducers({\r\n    qualities: qualitiesReducer,\r\n    professions: professionsReducer,\r\n    users: usersReducer,\r\n    comments: commentsReducer\r\n});\r\n\r\nexport function createStore() {\r\n    return configureStore({\r\n        reducer: rootReducer\r\n    });\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App/App\";\r\nimport { Router } from \"react-router-dom\";\r\nimport { createStore } from \"./App/store/createStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport history from \"./App/utils/history\";\r\n\r\nconst store = createStore();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <Router history={history}>\r\n                <App />\r\n            </Router>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}